# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  # boot.initrd.kernelModules = ["amdgpu"];
  virtualisation.libvirtd.enable = true;
  boot.kernelPackages = pkgs.linuxPackages_xanmod_latest;
  boot.initrd.availableKernelModules = [
    "xhci_pci"
    "ahci"
    "nvme"
    "usbhid"
    "usb_storage"
    "sd_mod"
  ];
  boot.kernelModules = [
    "kvm-amd"
    "v4l2loopback"
  ];
  boot.extraModulePackages = with config.boot.kernelPackages; [ v4l2loopback ];
  boot.extraModprobeConfig = ''
    options snd_usb_audio vid=0x1235 pid=0x8211 device_setup=1
    options kvm_amd nested=1
    options kvm ignore_msrs=1 report_ignored_msrs=0
  '';
  #hardware.cpu.amd.updateMicrocode = true;

  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = true;

  systemd.tmpfiles.rules =
    let
      rocmEnv = pkgs.symlinkJoin {
        name = "rocm-combined";
        paths = with pkgs.rocmPackages; [
          rocblas
          hipblas
          clr
        ];
      };
    in
    [
      "L+    /opt/rocm   -    -    -     -    ${rocmEnv}"
      "L+    /opt/amdgpu   -    -    -     -    ${pkgs.libdrm}"
    ];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/a1bc418b-85a3-404a-8ac8-2489e0493a90";
    fsType = "ext4";
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/E727-A42A";
    fsType = "vfat";
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/004a816f-9715-4515-9dac-ca261aa2e7d9";
    fsType = "ext4";
  };

  swapDevices = [ ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp6s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp5s0.useDHCP = lib.mkDefault true;

  # nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # Bluetooth
  hardware.bluetooth = {
    enable = true;
    powerOnBoot = true;
  };

  # hardware.pulseaudio.support32Bit = true;
  ### AMD STUFF
  hardware.graphics = {
    # Mesa
    enable = true;
    extraPackages = with pkgs; [
      mangohud
      rocmPackages.clr.icd
    ];
    extraPackages32 = with pkgs; [ pkgsi686Linux.mangohud ];
    enable32Bit = true;
  };
  hardware.amdgpu = {
    overdrive.enable = true;
  };

  # Audio goes wonkers and seems to go low quality (low sample rate?)
  # cookiecutie.sound.pro = true;

  i18n.defaultLocale = "en_US.UTF-8";
  # Set your time zone.
  time.timeZone = "America/Santiago";

  # seems like envision is bad so not using it
  # programs.envision = {
  #   enable = true;
  #   package = pkgs.envision;
  # };

  environment.systemPackages = with pkgs; [
    nvtopPackages.amd
    radeontop
  ];

  services.wivrn = {
    enable = true;
    package = pkgs.wivrn.overrideAttrs (oldAttrs: {
      monado = pkgs.applyPatches {
        patches = oldAttrs.monado.patches ++ [
          (pkgs.fetchpatch {
            url = "https://gitlab.freedesktop.org/monado/monado/-/merge_requests/2253.patch";
            sha256 = "sha256-lYCNu5hGqifMonqZTGIT2U+x8YHW7DtGswlRHaXKDEU=";
          })
        ];

        inherit (oldAttrs.monado) src postPatch;
      };
      cmakeFlags = (oldAttrs.cmakeFlags or [ ]) ++ [
        (lib.cmakeBool "WIVRN_FEATURE_SOLARXR" true)
      ];
    });

    # Write information to /etc/xdg/openxr/1/active_runtime.json, VR applications
    # will automatically read this and work with WiVRn (Note: This does not currently
    # apply for games run in Valve's Proton)
    defaultRuntime = true;

    # Run WiVRn as a systemd service on startup
    autoStart = true;

    # Config for WiVRn (https://github.com/WiVRn/WiVRn/blob/master/docs/configuration.md)
    config = {
      enable = true;
      json = {
        # 1.0x foveation scaling
        scale = 1.0;
        # 100 Mb/s
        bitrate = 100000000;
        encoders = [
          {
            encoder = "vaapi";
            codec = "h265";
            # 1.0 x 1.0 scaling
            width = 1.0;
            height = 1.0;
            offset_x = 0.0;
            offset_y = 0.0;
          }
        ];
      };
    };
  };

  # Force radv
  environment.variables.AMD_VULKAN_ICD = "RADV";
  networking.hostName = "uridesk"; # Define your hostname.
}
